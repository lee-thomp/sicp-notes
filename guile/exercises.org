#+title: SICP Exercise Solutions & Notes

* Chapter 2

** Exercise 2.1

Given:
#+begin_src scheme :session 2-1 :results handling none
  (define make-rat cons)
  (define numer car)
  (define denom cdr)

  (define (print-rat x)
    (newline)
    (display (numer x))
    (display "/")
    (display (denom x)))

#+end_src

#+begin_quote
Define a better version of =make-rat= that handles
both positive and negative arguments.  =make-rat= should normalize
the sign so that if the rational number is positive, both the
numerator and denominator are positive, and if the rational number
is negative, only the numerator is negative.
#+end_quote

#+begin_src scheme :session 2-1 :results handling none
  (define (make-rat/better n d)
    (let ((g (gcd n d)))
      (if (positive? d)
          (cons (/ n g)
                (/ d g))
          (cons (/ n g -1)
                (/ d g -1)))))
#+end_src

To check:
#+begin_src scheme :session 2-1
  (use-modules ((rnrs) :version (6))
               (srfi srfi-1))

  (define (check n d expect)
    (assert
     (equal? expect (with-output-to-string
                      (Î» _
                        (print-rat (make-rat/better n d)))))))

  (and
   (check 1 2 "\n1/2")
   (check 1 -2 "\n-1/2")
   (check -1 2 "\n-1/2")
   (check -1 -2 "\n1/2"))
#+end_src

#+RESULTS:
: #t
